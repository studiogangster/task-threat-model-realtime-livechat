{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sprinklr Live Chat SDK: Secure Architecture &amp; Threat Modeling","text":"<p>Welcome to the documentation portal for the Sprinklr Live Chat SDK security architecture and threat modeling project. This site provides a comprehensive approach to designing, analyzing, and securing a modern SaaS chat platform, supporting real-world engineering, security, and compliance activities.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized to provide a clear, end-to-end view of the system, its security posture, and the methodologies used to ensure robust protection for both application and cloud environments.</p>"},{"location":"#1-system-design","title":"1. System Design","text":"<ul> <li>Overview: High-level architecture, main actors, and data flows.</li> <li>Application Details: Key components, integration points, and user journeys.</li> <li>Functionalities: Core and advanced features, including LLM-powered chat, admin dashboard, and partner integrations.</li> </ul>"},{"location":"#2-security-architecture","title":"2. Security Architecture","text":"<ul> <li>Architecture: Secure design principles, trust boundaries, and defense-in-depth strategies.</li> <li>Threat Model (Application): STRIDE-based analysis of application-level risks and mitigations.</li> <li>Threat Model (Cloud): Cloud infrastructure threat modeling, including AWS-specific risks and controls.</li> <li>Secure Architecture: Best practices for authentication, authorization, data protection, and secure deployment.</li> <li>Incident Response: Playbooks, monitoring, and response strategies for security events.</li> </ul>"},{"location":"#3-supporting-materials","title":"3. Supporting Materials","text":"<ul> <li>Glossary: Definitions of key terms, acronyms, and cloud/security concepts.</li> <li>Diagrams: System, data flow, and threat model diagrams (embedded throughout the docs).</li> <li>References: Links to standards, frameworks, and external resources.</li> </ul>"},{"location":"#how-to-use-this-documentation","title":"How to Use This Documentation","text":"<ul> <li>For Security Architects: Review the end-to-end process of secure system design, from requirements to incident response.</li> <li>For Developers: Understand integration points, security controls, and best practices for building on the platform.</li> <li>For Interviewers: Assess the candidate\u2019s ability to structure, analyze, and communicate complex security architectures.</li> </ul>"},{"location":"#key-highlights","title":"Key Highlights","text":"<ul> <li>Covers both application and cloud security, with dedicated threat models for each.</li> <li>Demonstrates secure-by-design principles, including mTLS, secrets management, and multi-region deployment.</li> <li>Includes actionable incident response guidance and real-world cloud security controls.</li> <li>Designed to be extensible for future features, compliance requirements, and evolving threats.</li> </ul> <p>Note: This documentation reflects an ongoing security architecture and threat modeling activity for the Sprinklr Live Chat SDK. It is designed to be extensible and adaptable as the platform evolves and new requirements emerge.</p>"},{"location":"glossary/","title":"Glossary","text":"<p>Admin User A user from the partner organization responsible for configuring, managing, and monitoring the Sprinklr integration.</p> <p>API Gateway A managed service that acts as a single entry point for APIs, handling authentication, routing, rate limiting, and monitoring.</p> <p>Application Load Balancer (ALB/ELB) A cloud-managed load balancer that distributes incoming application traffic across multiple targets for scalability and high availability.</p> <p>CloudFront CDN A content delivery network service that securely delivers data, videos, applications, and APIs to users globally with low latency.</p> <p>ECS/EKS Amazon Elastic Container Service (ECS) and Elastic Kubernetes Service (EKS) are managed container orchestration services for deploying and scaling containerized applications.</p> <p>End User An individual who interacts with the partner\u2019s web or mobile application, typically a customer or internal user.</p> <p>LLM (Large Language Model) A machine learning model (e.g., OpenAI, Anthropic) used for generating contextual responses and knowledge integration.</p> <p>mTLS (Mutual TLS) A security protocol that ensures both client and server authenticate each other using certificates, providing secure, trusted communication.</p> <p>Partner Organization An external entity (e.g., bank, retailer) integrating Sprinklr Live Chat into its own applications.</p> <p>RDS Amazon Relational Database Service, a managed database service for storing structured data.</p> <p>S3 Amazon Simple Storage Service, used for storing and retrieving any amount of data at any time.</p> <p>SaaS (Software as a Service) A software delivery model in which applications are hosted by a service provider and made available to customers over the internet.</p> <p>Secrets Manager / Vault A secure service for storing, managing, and rotating sensitive information such as API keys, certificates, and configuration secrets.</p> <p>Sprinklr Dashboard A web interface for partner admin users to onboard, configure, and monitor their Sprinklr integration.</p> <p>STRIDE A threat modeling framework covering Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, and Elevation of Privilege.</p> <p>Trust Boundary A point where data or control flows across systems or users with differing levels of trust or administrative control.</p> <p>VPC (Virtual Private Cloud) A logically isolated section of the cloud where resources are launched in a virtual network defined by the user.</p> <p>WebSocket A protocol providing full-duplex communication channels over a single TCP connection, used for real-time chat.</p>"},{"location":"1.%20System%20Design/actors/","title":"Actors","text":"<p>This section describes the main actors involved in the Sprinklr Live Chat platform and their roles.</p>"},{"location":"1.%20System%20Design/actors/#sprinklr-saas","title":"Sprinklr SaaS","text":"<p>The trusted, centralized cloud platform operated by Sprinklr. Responsible for chat orchestration, authentication, LLM integration, and partner management.</p>"},{"location":"1.%20System%20Design/actors/#partner-organization","title":"Partner Organization","text":"<p>An external entity (e.g., a bank, retailer) that integrates Sprinklr Live Chat into its own web or mobile applications.</p>"},{"location":"1.%20System%20Design/actors/#partner-web-app","title":"Partner Web App","text":"<p>The web or mobile application owned by the partner, embedding the Sprinklr SDK for end-user chat.</p>"},{"location":"1.%20System%20Design/actors/#partner-backend","title":"Partner Backend","text":"<p>The API server hosted by the partner, providing dynamic user data, session context, and personalized knowledge to Sprinklr.</p>"},{"location":"1.%20System%20Design/actors/#partner-admin-user","title":"Partner Admin User","text":"<p>A user from the partner organization responsible for configuring, managing, and monitoring the Sprinklr integration.</p>"},{"location":"1.%20System%20Design/actors/#end-user","title":"End User","text":"<p>An individual (customer or internal user) of the partner organization who interacts with the partner\u2019s application and uses the live chat feature.</p>"},{"location":"1.%20System%20Design/actors/#external-llm-api","title":"External LLM API","text":"<p>Third-party large language model providers (e.g., OpenAI, Anthropic) used for generating contextual responses.</p>"},{"location":"1.%20System%20Design/data_flows/","title":"Data Flows","text":"<p>This section describes the key data flows within the Sprinklr Live Chat platform, illustrating how information moves between actors and system components.</p>"},{"location":"1.%20System%20Design/data_flows/#high-level-data-flow","title":"High-Level Data Flow","text":"<ol> <li> <p>End User Login:    The end user logs into the partner web or mobile app.</p> </li> <li> <p>Authentication:    The partner app authenticates the user and requests a session token from Sprinklr SaaS.</p> </li> <li> <p>Live Chat Initiation:    The end user initiates a chat session via the embedded Sprinklr SDK.</p> </li> <li> <p>Session Establishment:    The partner app presents the session token to Sprinklr SaaS, which validates and establishes a secure WebSocket channel.</p> </li> <li> <p>Message Exchange:    Messages are exchanged in real time between the end user and Sprinklr SaaS, with optional context or data fetched from the partner backend.</p> </li> <li> <p>LLM Integration:    Sprinklr SaaS may call external LLM APIs to generate contextual responses, using knowledge from the partner backend or uploaded FAQs.</p> </li> </ol>"},{"location":"1.%20System%20Design/data_flows/#detailed-data-flow-diagram","title":"Detailed Data Flow Diagram","text":"<pre><code>flowchart TD\n  EU[\"End User\"]\n  PWA[\"Partner Web App\"]\n  PB[\"Partner Backend\"]\n  SLC[\"Sprinklr SaaS\"]\n  LLMAPI[\"External LLM API\"]\n\n  EU -- \"Login\" --&gt; PWA\n  PWA -- \"Authenticate\" --&gt; PB\n  PWA -- \"Request Token\" --&gt; SLC\n  SLC -- \"Issue Session Token\" --&gt; PWA\n  EU -- \"Live Chat (via SDK)\" --&gt; SLC\n  SLC -- \"S2S/API Call\" --&gt; PB\n  SLC -- \"LLM Query\" --&gt; LLMAPI\n</code></pre>"},{"location":"1.%20System%20Design/data_flows/#security-considerations","title":"Security Considerations","text":"<ul> <li>All data flows crossing trust boundaries are protected with TLS (for browser to service) and mTLS (for service to service).</li> <li>Authentication and authorization are enforced at every step.</li> <li>Sensitive data is encrypted in transit and at rest.</li> <li>For communication between the end user and the Sprinklr Live Chat Service, session tokens are generated via a partner system. These tokens establish a secure authentication and authorization (authn/authz) channel.  </li> <li>A short-lived token is issued per session, with a brief TTL, and is refreshed periodically to maintain security without long-lived credentials.</li> </ul>"},{"location":"1.%20System%20Design/deployment/","title":"Deployment","text":"<p>This section describes the deployment architecture and infrastructure for the Sprinklr Live Chat platform.</p>"},{"location":"1.%20System%20Design/deployment/#cloud-environment","title":"Cloud Environment","text":"<ul> <li> <p>AWS Cloud:   The platform is deployed on Amazon Web Services (AWS), leveraging managed services for compute, storage, networking, and security.</p> </li> <li> <p>Multi-Region:   Services are deployed across multiple AWS regions to ensure high availability, disaster recovery, and low-latency access for global users.</p> </li> </ul>"},{"location":"1.%20System%20Design/deployment/#core-infrastructure-components","title":"Core Infrastructure Components","text":"<ul> <li> <p>Elastic Load Balancer (ELB):   Distributes incoming traffic across multiple application servers for scalability and fault tolerance.</p> </li> <li> <p>API Gateway:   Serves as the single entry point for all public, partner, and admin API requests, enforcing authentication and rate limiting.</p> </li> <li> <p>ECS/EKS:   Container orchestration for scalable, isolated application services.</p> </li> <li> <p>RDS:   Managed relational database for storing persistent data.</p> </li> <li> <p>S3:   Object storage for static assets, knowledge uploads, and logs.</p> </li> <li> <p>CloudFront CDN:   Delivers static content and SDK assets globally with low latency.</p> </li> <li> <p>Secrets Manager/Vault:   Centralized management of secrets, certificates, and configuration.</p> </li> </ul>"},{"location":"1.%20System%20Design/deployment/#security-and-operations","title":"Security and Operations","text":"<ul> <li> <p>mTLS:   Mutual TLS is enforced for all partner-to-cloud and internal service-to-service communication.</p> </li> <li> <p>Auto-Scaling:   Services automatically scale based on demand to maintain performance and cost efficiency.</p> </li> <li> <p>Monitoring &amp; Logging:   Cloud-native tools (CloudWatch, GuardDuty, VPC Flow Logs) are used for monitoring, alerting, and incident response.</p> </li> <li> <p>Disaster Recovery:   Regular backups and cross-region replication ensure business continuity.</p> </li> </ul>"},{"location":"1.%20System%20Design/scope/","title":"Scope","text":"<p>This section defines the scope and trust boundaries for the Sprinklr Live Chat platform.</p>"},{"location":"1.%20System%20Design/scope/#trust-boundaries","title":"Trust Boundaries","text":"<ul> <li>Sprinklr SaaS: All Sprinklr-operated services and infrastructure are considered within the trust boundary. We assume full control and responsibility for security, compliance, and operations within this environment.</li> <li>External Entities: All other entities\u2014including partner organizations, partner web/mobile apps, partner backends, partner admin users, and end users\u2014are considered outside the trust boundary. These are treated as untrusted or semi-trusted, and all interactions crossing into Sprinklr SaaS are subject to strict security controls and monitoring.</li> </ul>"},{"location":"1.%20System%20Design/scope/#deployment-environment","title":"Deployment Environment","text":"<ul> <li>The Sprinklr Live Chat platform is deployed on AWS Cloud, leveraging managed services for scalability, availability, and security.</li> <li>Multi-region deployment is used to ensure high availability and performance.</li> <li>All public and partner access is routed through secure gateways (API Gateway/ELB) with mTLS and strict authentication/authorization.</li> </ul>"},{"location":"1.%20System%20Design/scope/#out-of-scope","title":"Out of Scope","text":"<ul> <li>Services not operated by Sprinklr (e.g., third-party analytics, external LLM APIs) are considered out of scope for direct control, but are subject to risk assessment and monitoring.</li> <li>On-premises deployments and non-cloud environments.</li> </ul>"},{"location":"1.%20System%20Design/system_design/","title":"System Design","text":""},{"location":"1.%20System%20Design/system_design/#sprinklr-live-chat","title":"Sprinklr Live Chat","text":""},{"location":"1.%20System%20Design/system_design/#project-overview","title":"Project Overview","text":"<p>Sprinklr Live Chat is a centralized SaaS platform designed to enable organizations to integrate real-time chat functionality into their web and mobile applications. The platform provides a secure, scalable, and context-aware chat experience, leveraging large language models (LLMs) for intelligent responses and knowledge integration.</p>"},{"location":"1.%20System%20Design/system_design/#document-scope","title":"Document Scope","text":"<p>This document presents the system design for the Sprinklr Live Chat system, focusing on the high-level structure, main actors, and data flows.</p>"},{"location":"1.%20System%20Design/system_design/#assumptions","title":"Assumptions","text":"<ul> <li>Sprinklr SaaS (including all Sprinklr-operated services and infrastructure) is considered within our trust boundary.</li> <li>All other entities\u2014including end users, client organizations, client web apps, and client backends \u2014are considered outside the trust boundary.</li> <li>The threat model assumes a zero-trust approach for all interactions crossing into Sprinklr from external users, systems, or services.</li> <li>The analysis is based on the current system architecture and may require updates as the platform evolves. </li> </ul> <p>Note: For the scope of simplicity, this document focuses on the web service, SDK, and mobile SDK. Other services are considered out of scope for this system design.</p>"},{"location":"1.%20System%20Design/system_design/#definitions","title":"Definitions","text":""},{"location":"1.%20System%20Design/system_design/#1-partner-organization","title":"1. Partner Organization","text":"<p>An organization (e.g., a bank, retailer) that integrates Sprinklr Live Chat into its own web or mobile applications for its customers. Ex: HDFC Bank, ICICI Bank, etc.</p>"},{"location":"1.%20System%20Design/system_design/#11-partner-web-app","title":"1.1 Partner Web App","text":"<p>The webapp owned by the partner organization, into which the Sprinklr SDK is embedded.</p>"},{"location":"1.%20System%20Design/system_design/#12-partner-admin-user","title":"1.2 Partner Admin User","text":"<p>A user(s) from the partner organization responsible for configuring, managing, and monitoring the Sprinklr integration in their web-app via the Sprinklr Dashboard, upload or update knowledge graph, FAQs, etc.</p>"},{"location":"1.%20System%20Design/system_design/#13-partner-backend","title":"1.3 Partner Backend","text":"<p>An API server hosted by the partner organization, exclusively accessible by Sprinklr systems. It provides dynamic user data, session context, and personalized knowledge. It may also include the MCP server used by Sprinklr LLM Agentic flows to provide personalized response to end-user.</p>"},{"location":"1.%20System%20Design/system_design/#14-partners-mcp-server","title":"1.4 Partner's MCP Server","text":"<p>A direct API call from Sprinklr\u2019s LLM Context Service to the partner\u2019s backend to retrieve personalized data for an end user query.</p>"},{"location":"1.%20System%20Design/system_design/#2-end-user","title":"2. End User","text":"<p>An End User is an authorized individual associated with a partner organization who interacts with the partner\u2019s web or mobile application. This user is typically a customer, user, or internal user of the partner, and has the necessary entitlements to initiate and participate in live chat conversations via the embedded SprinklrSDK.</p>"},{"location":"1.%20System%20Design/system_design/#3-sprinklr-saas","title":"3. Sprinklr SaaS","text":"<p>Sprinklr is a centralized cloud platform offering a comprehensive suite of services, including realtime live chat, LLM-powered intelligence, dashboards for partners to manage integration, etc. This platform unifies all unique services within our trusted system, delivering a cohesive and secure SaaS experience.</p>"},{"location":"1.%20System%20Design/system_design/#high-level-system-overview","title":"High-Level System Overview","text":"<p>Sprinklr Live Chat is a SaaS platform enabling organizations to integrate real-time chat into their web and mobile applications. The system is designed with strong isolation between end users, partner organizations, and Sprinklr SaaS, and leverages LLMs (local models or external API based services) for contextual responses.</p>"},{"location":"1.%20System%20Design/system_design/#high-level-data-flow-diagram","title":"High-Level Data Flow Diagram","text":"<pre><code>flowchart TD\n  subgraph EndUser[\"End User (Outside Trust Boundary)\"]\n    EU[\"End User\"]\n  end\n\n  subgraph PartnerOrg[\"Partner Organization (Outside Trust Boundary)\"]\n    PWA[\"Partner Web App\"]\n    PB[\"Partner Backend\"]\n  end\n\n  subgraph SprinklrSaaS[\"Sprinklr SaaS (Trust Boundary)\"]\n    SLC[\"Sprinklr SaaS\"]\n  end\n\n  subgraph LLMExt[\"LLM AI Service (External)\"]\n    LLMAPI[\"OpenAI / Anthropic / etc.\"]\n  end\n\n  EU -- \"1 - Login\" --&gt; PWA\n  PWA -- \"2 - Authenticate\" --&gt; PB\n  PWA -- \"3 - Request Sprinklr Token\" --&gt; SLC\n  SLC -- \"4 - Issue Session Token\" --&gt; PWA\n  EU -- \"5 - Live Chat to Sprinklr with Token\" --&gt; SLC\n  SLC -- \"6 - S2S or API Call\" --&gt; PB\n  SLC -- \"7 - LLM Query (API Call)\" --&gt; LLMAPI\n</code></pre>"},{"location":"1.%20System%20Design/system_design/#component-definitions","title":"Component Definitions","text":"<ul> <li>Sprinklr Live Chat Auth Service: Manages real-time chat sessions, authenticates and authorizes end-users and clients, and creates secure websocket channels.</li> <li>Sprinklr LLM Context Service: Ingests FAQs and knowledge uploads, provides context to the LLM, and may call back to partner backends for personalized data.</li> <li>Sprinklr Dashboard: Web interface for partner admin users to onboard, configure, and monitor their Sprinklr integration.</li> <li>Sprinklr Integration Backend: Backend service for authentication, verification, API key/secret issuance, and integration management.</li> </ul>"},{"location":"1.%20System%20Design/system_design/#summary","title":"Summary","text":"<p>This system design document provides a high-level overview of the Sprinklr Live Chat platform, its main actors, and the data flows between them. The next sections (in separate files) will cover detailed architecture, threat modeling, and secure architecture practices.</p>"},{"location":"1.%20System%20Design/system_design/#appendix-including-and-referencing-attachments","title":"Appendix: Including and Referencing Attachments","text":"<p>To provide comprehensive documentation for system design, threat modeling, and secure architecture review (covering both application and cloud aspects), follow these guidelines for including and referencing attachments:</p>"},{"location":"1.%20System%20Design/system_design/#1-file-formats-and-organization","title":"1. File Formats and Organization","text":"<ul> <li>Use standard formats: PDF, PNG, SVG, Markdown (.md), or editable diagrams (e.g., draw.io, Lucidchart).</li> <li>Store attachments in a dedicated directory (e.g., <code>attachments/</code> or <code>diagrams/</code>).</li> <li>Use clear, descriptive filenames (e.g., <code>system_architecture_cloud.png</code>, <code>threat_model_app.pdf</code>).</li> </ul>"},{"location":"1.%20System%20Design/system_design/#2-referencing-attachments-in-documentation","title":"2. Referencing Attachments in Documentation","text":"<ul> <li>Reference attachments inline using Markdown:</li> <li>For images/diagrams: <code>![System Architecture Diagram](./attachments/system_architecture_cloud.png)</code></li> <li>For documents: <code>[Threat Model Details](./attachments/threat_model_app.pdf)</code></li> <li>For large or external files, provide a link to the location (e.g., shared drive, Confluence, or Git repository).</li> </ul>"},{"location":"1.%20System%20Design/system_design/#3-application-vs-cloud-focus","title":"3. Application vs. Cloud Focus","text":"<ul> <li>Clearly label each attachment as \"Application\" or \"Cloud\" focused in its filename or in the documentation.</li> <li>Example:  </li> <li><code>system_design_app.md</code> (application-level design)  </li> <li><code>system_design_cloud.md</code> (cloud infrastructure design)</li> </ul>"},{"location":"1.%20System%20Design/system_design/#4-example-references","title":"4. Example References","text":"<ul> <li>System Design Diagram (Cloud): <code>![Cloud System Design](./attachments/system_design_cloud.png)</code></li> <li>Threat Model Table (Application): <code>[Threat Model Table](./attachments/threat_model_app.pdf)</code></li> <li>Secure Architecture Review (Cloud): <code>[Secure Architecture Review](./attachments/secure_arch_cloud.pdf)</code></li> </ul>"},{"location":"1.%20System%20Design/system_design/#5-best-practices","title":"5. Best Practices","text":"<ul> <li>Keep attachments up to date with the main documentation.</li> <li>Version control all attachments where possible.</li> <li>Cross-reference attachments in relevant sections for clarity.</li> </ul> <p>This appendix ensures that all supporting materials for system design, threat modeling, and secure architecture are easy to locate, reference, and maintain.</p>"},{"location":"2.%20Secure%20Architecture/architecture/","title":"Architecture: Sprinklr Live Chat","text":""},{"location":"2.%20Secure%20Architecture/architecture/#1-high-level-system-architecture","title":"1. High-Level System Architecture","text":"<p>This section provides a top-level overview of the main trust boundaries and data flows in the Sprinklr Live Chat system. It illustrates how the End User interacts with the Client Web App, how authentication and session tokens are managed, and how the Client Web App and End User communicate with the Sprinklr SaaS platform for live chat functionality. The diagram highlights the separation between client and Sprinklr trust boundaries and the key steps in the authentication and chat flow.</p> <pre><code>flowchart TD\n  subgraph EndUser[\"End User (Outside Trust Boundary)\"]\n    EU[\"End User\"]\n  end\n\n  subgraph PartnerOrg[\"Partner Organization (Outside Trust Boundary)\"]\n    PWA[\"Partner Web App\"]\n    PB[\"Partner Backend\"]\n  end\n\n  subgraph SprinklrSaaS[\"Sprinklr SaaS (Trust Boundary)\"]\n    SLC[\"Sprinklr SaaS\"]\n  end\n\n  subgraph LLMExt[\"LLM AI Service (External)\"]\n    LLMAPI[\"OpenAI / Anthropic / etc.\"]\n  end\n\n  EU -- \"1 - Login\" --&gt; PWA\n  PWA -- \"2 - Authenticate\" --&gt; PB\n  PWA -- \"3 - Request Sprinklr Token\" --&gt; SLC\n  SLC -- \"4 - Issue Session Token\" --&gt; PWA\n  EU -- \"5 - Live Chat to Sprinklr with Token\" --&gt; SLC\n  SLC -- \"6 - S2S or API Call\" --&gt; PB\n  SLC -- \"7 - LLM Query (API Call)\" --&gt; LLMAPI\n</code></pre>"},{"location":"2.%20Secure%20Architecture/architecture/#2-sprinklr-saas-cloud-architecture-data-flows","title":"2. Sprinklr SaaS Cloud Architecture &amp; Data Flows","text":"<p>This section details the internal cloud architecture of the Sprinklr SaaS platform as deployed on AWS, and the major data flows between its components. These diagrams help identify cloud-specific attack surfaces, trust boundaries, and the secure delivery path for the SDK.</p>"},{"location":"2.%20Secure%20Architecture/architecture/#21-high-level-aws-system-architecture","title":"2.1 High-Level AWS System Architecture","text":"<p>The following diagram shows the main AWS infrastructure components used by Sprinklr SaaS, including load balancers, API gateways, compute clusters, storage, caching, logging, and the use of S3 and CloudFront for secure SDK delivery. WebSocket connections for live chat are supported via the Application Load Balancer (ALB) and routed to the ECS/EKS app services. This view is essential for understanding network segmentation, service isolation, and the entry points for both API and static asset requests.</p> <pre><code>flowchart TD\n  subgraph Public[\"Public Internet\"]\n    PUB[\"End User / Partner Web App\"]\n    CAU[\"Partner Admin User\"]\n  end\n\n  subgraph VPC[\"AWS VPC (Sprinklr SaaS Trust Boundary)\"]\n    ALB[\"Application Load Balancer (WebSocket-enabled, Public)\"]\n    AGW[\"API Gateway\"]\n    ECS[\"ECS/EKS (App Services)\"]\n    LLM[\"LLM Context Service\"]\n    RDS[\"RDS/Database\"]\n    S3PUB[\"S3 (Public: Static SPA Assets)\"]\n    S3PRIV[\"S3 (Private: FAQ/Knowledge Data)\"]\n    REDIS[\"Redis/Cache\"]\n    LOGS[\"CloudWatch Logs\"]\n    CF[\"CloudFront CDN\"]\n    DASH[\"Sprinklr Dashboard (SPA)\"]\n  end\n\n  subgraph LLMExt[\"LLM AI Service (External)\"]\n    LLMAPI[\"OpenAI / Anthropic / etc.\"]\n  end\n\n  %% All users access via ALB\n  PUB -- \"HTTPS / WebSocket\" --&gt; ALB\n  CAU -- \"HTTPS\" --&gt; ALB\n\n  %% ALB routes to API Gateway and ECS\n  ALB -- \"API / WebSocket\" --&gt; AGW\n  ALB -- \"API / WebSocket\" --&gt; ECS\n\n  %% Dashboard (SPA) is served as static assets via CloudFront\n  CF -- \"Serves SPA Static Assets\" --&gt; PUB\n  S3PUB -- \"Static Assets\" --&gt; CF\n\n  %% Dashboard (SPA) API calls go via ALB -&gt; AGW -&gt; ECS\n  AGW -- \"Routes API Calls\" --&gt; ECS\n  DASH -- \"API Calls\" --&gt; AGW\n\n  %% ECS/LLM access private S3 for FAQ/Knowledge\n  ECS -- \"FAQ/Knowledge Access\" --&gt; S3PRIV\n  LLM -- \"FAQ/Knowledge Access\" --&gt; S3PRIV\n\n  %% ECS/LLM internal flows\n  ECS --&gt; LLM\n  ECS --&gt; RDS\n  ECS --&gt; REDIS\n  ECS --&gt; LOGS\n  LLM --&gt; RDS\n\n  %% LLM Context Service calls external LLM API\n  LLM -- \"API Call\" --&gt; LLMAPI\n\n  %% Static SDK delivery (if needed)\n  S3PUB -- \"SDK Static Files\" --&gt; CF\n\n  %% Dashboard login/integration management via ALB\n  ALB -- \"Dashboard HTTPS\" --&gt; DASH\n</code></pre>"},{"location":"2.%20Secure%20Architecture/architecture/#22-data-flow-diagram-dfd","title":"2.2 Data Flow Diagram (DFD)","text":"<p>This diagram illustrates the flow of data between the main actors and services in the Sprinklr SaaS platform, including user authentication, chat session management, LLM context queries, S2S/API calls, and the secure delivery of the SDK via CloudFront and S3. It highlights the key integration points and the movement of sensitive data across trust boundaries.</p> <pre><code>flowchart TD\n  EU[\"End User\"]\n  CWA[\"Client Web App\"]\n  AGW[\"API Gateway\"]\n  ECS[\"App Services\"]\n  LLM[\"LLM Context Service\"]\n  RDS[\"Database\"]\n  S3[\"S3 Storage &amp; SDK\"]\n  CF[\"CloudFront CDN\"]\n  PB[\"Partner Backend\"]\n\n  EU -- \"Login/Chat\" --&gt; PWA\n  PWA -- \"API Request\" --&gt; AGW\n  AGW -- \"Routes\" --&gt; ECS\n  ECS -- \"Session/Chat Data\" --&gt; RDS\n  ECS -- \"Knowledge/Files\" --&gt; S3\n  ECS -- \"LLM Query\" --&gt; LLM\n  LLM -- \"Context/Data\" --&gt; RDS\n  LLM -- \"Knowledge\" --&gt; S3\n  ECS -- \"S2S/API Call\" --&gt; PB\n  PWA -- \"SDK Request\" --&gt; CF\n  CF -- \"Serves SDK\" --&gt; PWA\n  CF -- \"Fetches from\" --&gt; S3\n</code></pre>"},{"location":"2.%20Secure%20Architecture/architecture/#3-data-flow-diagrams","title":"3. Data Flow Diagrams","text":"<p>(See attached diagrams for each group and component)</p>"},{"location":"2.%20Secure%20Architecture/architecture/#summary","title":"Summary","text":"<p>This architecture document provides a detailed view of the Sprinklr Live Chat platform's cloud infrastructure, data flows, and integration points. It is intended to support further analysis in threat modeling and secure architecture.</p>"},{"location":"2.%20Secure%20Architecture/cloud_architecture/","title":"Sprinklr SaaS Cloud Architecture &amp; Data Flows","text":"<p>This section details the internal cloud architecture of the Sprinklr SaaS platform as deployed on AWS, and the major data flows between its components. The architecture is designed for security, scalability, and operational excellence, with clear trust boundaries and secure delivery paths for all assets and APIs.</p>"},{"location":"2.%20Secure%20Architecture/cloud_architecture/#high-level-minimal-architecture-diagram","title":"High-Level Minimal Architecture Diagram","text":"<p>The following minimal diagram highlights the main actors and core AWS components involved in the integration, focusing on the Sprinklr Integration Dashboard (SPA), AWS VPC, Backend API Service, WebSocket, AWS ELB, S3, CloudFront, and connections from end users and partner users/admins. CloudFront is shown as the entry point for static assets, in front of the Sprinklr VPC.</p> <pre><code>flowchart TD\n  EU[\"End User\"]\n  PA[\"Partner Admin/User\"]\n  CF[\"CloudFront CDN\"]\n  S3[\"S3 (Static Assets)\"]\n  ELB[\"AWS ELB (WebSocket/API)\"]\n  VPC[\"AWS VPC\"]\n  API[\"Backend API Service\"]\n  WS[\"WebSocket Service\"]\n  SPA[\"Integration Dashboard (SPA)\"]\n\n  EU -- \"HTTPS (SPA)\" --&gt; CF\n  PA -- \"HTTPS (SPA)\" --&gt; CF\n  CF -- \"Serves SPA\" --&gt; EU\n  CF -- \"Serves SPA\" --&gt; PA\n  CF -- \"Fetches from\" --&gt; S3\n  SPA -- \"API/WebSocket\" --&gt; ELB\n  EU -- \"API/WebSocket\" --&gt; ELB\n  PA -- \"API/WebSocket\" --&gt; ELB\n  ELB -- \"Routes to\" --&gt; VPC\n  VPC -- \"API Calls\" --&gt; API\n  VPC -- \"WebSocket\" --&gt; WS\n</code></pre>"},{"location":"2.%20Secure%20Architecture/cloud_architecture/#high-level-aws-system-architecture","title":"High-Level AWS System Architecture","text":"<p>The following diagram shows the main AWS infrastructure components used by Sprinklr SaaS, including load balancers, API gateways, compute clusters, storage, caching, logging, and the use of S3 and CloudFront for secure SDK delivery. WebSocket connections for live chat are supported via the Application Load Balancer (ALB) and routed to the ECS/EKS app services.</p> <pre><code>flowchart TD\n  subgraph Public[\"Public Internet\"]\n    PUB[\"End User / Partner Web App\"]\n    CAU[\"Partner Admin User\"]\n  end\n\n  subgraph VPC[\"AWS VPC (Sprinklr SaaS Trust Boundary)\"]\n    ALB[\"Application Load Balancer (WebSocket-enabled, Public)\"]\n    AGW[\"API Gateway\"]\n    ECS[\"ECS/EKS (App Services)\"]\n    LLM[\"LLM Context Service\"]\n    RDS[\"RDS/Database\"]\n    S3PUB[\"S3 (Public: Static SPA Assets)\"]\n    S3PRIV[\"S3 (Private: FAQ/Knowledge Data)\"]\n    REDIS[\"Redis/Cache\"]\n    LOGS[\"CloudWatch Logs\"]\n    CF[\"CloudFront CDN\"]\n    DASH[\"Sprinklr Dashboard (SPA)\"]\n  end\n\n  subgraph LLMExt[\"LLM AI Service (External)\"]\n    LLMAPI[\"OpenAI / Anthropic / etc.\"]\n  end\n\n  %% All users access via ALB\n  PUB -- \"HTTPS / WebSocket\" --&gt; ALB\n  CAU -- \"HTTPS\" --&gt; ALB\n\n  %% ALB routes to API Gateway and ECS\n  ALB -- \"API / WebSocket\" --&gt; AGW\n  ALB -- \"API / WebSocket\" --&gt; ECS\n\n  %% Dashboard (SPA) is served as static assets via CloudFront\n  CF -- \"Serves SPA Static Assets\" --&gt; PUB\n  S3PUB -- \"Static Assets\" --&gt; CF\n\n  %% Dashboard (SPA) API calls go via ALB -&gt; AGW -&gt; ECS\n  AGW -- \"Routes API Calls\" --&gt; ECS\n  DASH -- \"API Calls\" --&gt; AGW\n\n  %% ECS/LLM access private S3 for FAQ/Knowledge\n  ECS -- \"FAQ/Knowledge Access\" --&gt; S3PRIV\n  LLM -- \"FAQ/Knowledge Access\" --&gt; S3PRIV\n\n  %% ECS/LLM internal flows\n  ECS --&gt; LLM\n  ECS --&gt; RDS\n  ECS --&gt; REDIS\n  ECS --&gt; LOGS\n  LLM --&gt; RDS\n\n  %% LLM Context Service calls external LLM API\n  LLM -- \"API Call\" --&gt; LLMAPI\n\n  %% Static SDK delivery (if needed)\n  S3PUB -- \"SDK Static Files\" --&gt; CF\n\n  %% Dashboard login/integration management via ALB\n  ALB -- \"Dashboard HTTPS\" --&gt; DASH\n</code></pre>"},{"location":"2.%20Secure%20Architecture/cloud_architecture/#component-breakdown","title":"Component Breakdown","text":"<ul> <li> <p>Application Load Balancer (ALB):   Entry point for all HTTPS and WebSocket traffic. Routes requests to API Gateway or directly to ECS/EKS services. Supports WebSocket connections for real-time chat.</p> </li> <li> <p>API Gateway (AGW):   Central API entry point, enforcing authentication, rate limiting, and routing to backend services.</p> </li> <li> <p>ECS/EKS (App Services):   Containerized application services for chat orchestration, session management, and business logic. Scales automatically based on demand.</p> </li> <li> <p>LLM Context Service:   Handles context enrichment and queries to external LLM APIs (e.g., OpenAI, Anthropic). Accesses private S3 for knowledge data.</p> </li> <li> <p>RDS/Database:   Stores persistent chat data, user sessions, and configuration.</p> </li> <li> <p>S3 (Public):   Hosts static assets (SPA, SDK) delivered via CloudFront CDN.</p> </li> <li> <p>S3 (Private):   Stores sensitive knowledge data, FAQs, and partner-uploaded content.</p> </li> <li> <p>Redis/Cache:   Provides low-latency caching for session and frequently accessed data.</p> </li> <li> <p>CloudWatch Logs:   Centralized logging for monitoring, alerting, and incident response.</p> </li> <li> <p>CloudFront CDN:   Delivers static assets globally with low latency and DDoS protection.</p> </li> <li> <p>Sprinklr Dashboard (SPA):   Admin and analytics dashboard, served as a static SPA.</p> </li> </ul>"},{"location":"2.%20Secure%20Architecture/cloud_architecture/#security-controls","title":"Security Controls","text":"<ul> <li> <p>Network Segmentation:   All critical services are deployed within a private VPC. Only ALB and CloudFront are exposed to the public internet.</p> </li> <li> <p>mTLS Everywhere:   Mutual TLS is enforced for all partner-to-cloud and internal service-to-service communication.</p> </li> <li> <p>Authentication &amp; Authorization:   API Gateway enforces strict authentication and role-based access control for all API requests.</p> </li> <li> <p>Secrets Management:   All credentials, API keys, and certificates are managed via AWS Secrets Manager or Vault.</p> </li> <li> <p>Monitoring &amp; Logging:   CloudWatch and GuardDuty provide real-time monitoring, alerting, and threat detection.</p> </li> <li> <p>DDoS Protection:   CloudFront and ALB provide built-in DDoS mitigation.</p> </li> </ul>"},{"location":"2.%20Secure%20Architecture/cloud_architecture/#operational-practices","title":"Operational Practices","text":"<ul> <li> <p>Auto-Scaling:   ECS/EKS and other services scale automatically based on load.</p> </li> <li> <p>Disaster Recovery:   Regular backups, cross-region replication, and tested recovery procedures.</p> </li> <li> <p>Continuous Deployment:   Infrastructure as Code (IaC) and CI/CD pipelines ensure consistent, auditable deployments.</p> </li> </ul>"},{"location":"2.%20Secure%20Architecture/cloud_architecture/#summary","title":"Summary","text":"<p>The Sprinklr SaaS cloud architecture leverages AWS best practices for security, scalability, and operational excellence. All public access is tightly controlled, and sensitive data is protected at every layer. This architecture supports secure, high-performance live chat for global partners and end users.</p>"},{"location":"2.%20Secure%20Architecture/data_flows/","title":"Data Flow Diagram (DFD)","text":"<p>This section illustrates the flow of data between the main actors and services in the Sprinklr SaaS platform, including user authentication, chat session management, LLM context queries, S2S/API calls, and the secure delivery of the SDK via CloudFront and S3. It highlights the key integration points and the movement of sensitive data across trust boundaries.</p> <pre><code>flowchart TD\n  EU[\"End User\"]\n  PWA[\"Partner Web App\"]\n  AGW[\"API Gateway\"]\n  ECS[\"App Services\"]\n  LLM[\"LLM Context Service\"]\n  RDS[\"Database\"]\n  S3[\"S3 Storage &amp; SDK\"]\n  CF[\"CloudFront CDN\"]\n  PB[\"Partner Backend\"]\n\n  EU -- \"Login/Chat\" --&gt; PWA\n  PWA -- \"API Request\" --&gt; AGW\n  AGW -- \"Routes\" --&gt; ECS\n  ECS -- \"Session/Chat Data\" --&gt; RDS\n  ECS -- \"Knowledge/Files\" --&gt; S3\n  ECS -- \"LLM Query\" --&gt; LLM\n  LLM -- \"Context/Data\" --&gt; RDS\n  LLM -- \"Knowledge\" --&gt; S3\n  ECS -- \"S2S/API Call\" --&gt; PB\n  PWA -- \"SDK Request\" --&gt; CF\n  CF -- \"Serves SDK\" --&gt; PWA\n  CF -- \"Fetches from\" --&gt; S3\n</code></pre>"},{"location":"2.%20Secure%20Architecture/data_flows/#key-points","title":"Key Points","text":"<ul> <li>Sensitive data is protected at all stages with encryption in transit and at rest.</li> <li>All API and chat flows are authenticated and authorized.</li> <li>The SDK is delivered securely via CloudFront and S3, ensuring integrity and availability.</li> </ul>"},{"location":"2.%20Secure%20Architecture/overview/","title":"Overview: High-Level System Architecture","text":"<p>This section provides a top-level overview of the main trust boundaries and data flows in the Sprinklr Live Chat system. It illustrates how the End User interacts with the Client Web App, how authentication and session tokens are managed, and how the Client Web App and End User communicate with the Sprinklr SaaS platform for live chat functionality. The diagram highlights the separation between client and Sprinklr trust boundaries and the key steps in the authentication and chat flow.</p> <pre><code>flowchart TD\n  subgraph EndUser[\"End User (Outside Trust Boundary)\"]\n    EU[\"End User\"]\n  end\n\n  subgraph PartnerOrg[\"Partner Organization (Outside Trust Boundary)\"]\n    PWA[\"Partner Web App\"]\n    PB[\"Partner Backend\"]\n  end\n\n  subgraph SprinklrSaaS[\"Sprinklr SaaS (Trust Boundary)\"]\n    SLC[\"Sprinklr SaaS\"]\n  end\n\n  subgraph LLMExt[\"LLM AI Service (External)\"]\n    LLMAPI[\"OpenAI / Anthropic / etc.\"]\n  end\n\n  EU -- \"1 - Login\" --&gt; PWA\n  PWA -- \"2 - Authenticate\" --&gt; PB\n  PWA -- \"3 - Request Sprinklr Token\" --&gt; SLC\n  SLC -- \"4 - Issue Session Token\" --&gt; PWA\n  EU -- \"5 - Live Chat to Sprinklr with Token\" --&gt; SLC\n  SLC -- \"6 - S2S or API Call\" --&gt; PB\n  SLC -- \"7 - LLM Query (API Call)\" --&gt; LLMAPI\n</code></pre>"},{"location":"2.%20Secure%20Architecture/trust_boundary/","title":"\ud83d\udd10 Trust Boundaries","text":"<p>This section defines all trust boundaries identified within the architecture. </p> <p>A trust boundary is any point where data or control flows across systems or users with differing levels of trust or administrative control. Each boundary introduces potential risks and must be analyzed for controls and mitigations.</p> <p>Each entry includes:</p> <ul> <li>id: Unique identifier</li> <li>description: Purpose and flow across the boundary</li> <li>source zone: Origin of data/control</li> <li>target zone: Destination of data/control</li> <li>type: <code>External</code>, <code>Internal</code>, <code>Partner</code>, or <code>Semi-Trusted</code></li> <li>security implications: Key risks and required controls</li> </ul>"},{"location":"2.%20Secure%20Architecture/trust_boundary/#tb-01-end-user-live-chat-sprinklr","title":"\ud83d\udd38 TB-01: End User \u2192 Live Chat (Sprinklr)","text":"<ul> <li>id: TB-01  </li> <li>description: End users interact with Sprinklr\u2019s live chat via frontend web or mobile SDKs.  </li> <li>source zone: End User (Untrusted / Internet)  </li> <li>target zone: Sprinklr Live Chat (SaaS)  </li> <li>type: External  </li> <li>security implications:<ul> <li>MITM Attacks</li> <li>Identity spoofing via JWT/session tokens  </li> <li>Unvalidated message injection (XSS/DoS)  </li> <li>Requires input validation, rate limiting, and session hardening  </li> </ul> </li> </ul> <p>High-Level Data Flow Diagram:</p> <pre><code>flowchart TD\n  EU[\"End User (Untrusted / Internet)\"]\n  SDK[\"Client Web/Mobile App (SDK)\"]\n  SLC[\"Sprinklr Live Chat (SaaS)\"]\n\n  EU -- \"Chat/Message\" --&gt; SDK\n  SDK -- \"API/WebSocket\" --&gt; SLC\n</code></pre>"},{"location":"2.%20Secure%20Architecture/trust_boundary/#tb-02-client-admin-sprinklr-dashboard","title":"\ud83d\udd38 TB-02: Client Admin \u2192 Sprinklr Dashboard","text":"<ul> <li>id: TB-02  </li> <li>description: Admin users log into Sprinklr to configure workflows, analytics, and responses.  </li> <li>source zone: Client Admin (Privileged User)  </li> <li>target zone: Sprinklr Admin UI (SaaS)  </li> <li>type: External  </li> <li>security implications:<ul> <li>Session hijacking or phishing  </li> <li>Configuration drift or overprivilege  </li> <li>Enforce MFA, logging, and role-based access  </li> <li>Prompt Injection</li> </ul> </li> </ul> <p>High-Level Data Flow Diagram:</p> <pre><code>flowchart TD\n  CAU[\"Client Admin User (Privileged)\"]\n  SD[\"Sprinklr Dashboard (Admin UI, SaaS)\"]\n\n  CAU -- \"Secure Login / Configuration / Management\" --&gt; SD\n</code></pre>"},{"location":"2.%20Secure%20Architecture/trust_boundary/#tb-03-sprinklr-llm-client-api-mcp-server","title":"\ud83d\udd38 TB-03: Sprinklr LLM \u2192 Client API / MCP Server","text":"<ul> <li>id: TB-03  </li> <li>description: LLM makes runtime callbacks to client\u2019s backend for memory/context enrichment.  </li> <li>source zone: Sprinklr LLM Engine  </li> <li>target zone: Client MCP API  </li> <li>type: Partner  </li> <li>security implications:<ul> <li>Request spoofing or replay  </li> <li>Data leakage or poisoning  </li> <li>Requires signed callbacks, MTLS, IP allowlist  </li> </ul> </li> </ul> <p>High-Level Data Flow Diagram (with Trust Boundary):</p> <pre><code>flowchart TD\n  subgraph Sprinklr_SaaS [\"Sprinklr SaaS (Trust Boundary)\"]\n    LLM[\"Sprinklr LLM Context Service\"]\n  end\n  subgraph Client_Org [\"Client Organization (Outside Trust Boundary)\"]\n    CB[\"Client Backend API / MCP Server\"]\n  end\n\n  LLM -. \"S2S Callback (MTLS/Signed)\" .-&gt; CB\n</code></pre> <p>Note: The \"subgraph\" boxes represent trust boundaries. The dashed arrow (<code>-.-&gt;</code>) visually indicates a data flow crossing the trust boundary, similar to a dotted line in traditional threat model diagrams. Mermaid does not support arbitrary dotted boxes, but this approach is widely used for trust boundary visualization in Mermaid diagrams.</p>"},{"location":"2.%20Secure%20Architecture/trust_boundary/#tb-04-llm-external-plugin-tooling","title":"\ud83d\udd38 TB-04: LLM \u2192 External Plugin / Tooling","text":"<ul> <li>id: TB-04  </li> <li>description: LLM invokes 3rd-party or customer-approved plugins via APIs for enriched actions.  </li> <li>source zone: LLM Plugin System  </li> <li>target zone: Plugin Tooling (e.g., 3rd-party SaaS , OpenAI, Azure, ... )  </li> <li>type: Semi-Trusted / External  </li> <li>security implications:<ul> <li>Insecure plugin code execution  </li> <li>Data sent to external sources  </li> <li>Vet plugins, apply scopes, and sandbox executions  </li> </ul> </li> </ul>"},{"location":"2.%20Secure%20Architecture/trust_boundary/#tb-05-sprinklr-admin-llm-prompt-config","title":"\ud83d\udd38 TB-05: Sprinklr Admin \u2194 LLM Prompt Config","text":"<ul> <li>id: TB-05  </li> <li>description: Admins create prompt templates/rules that influence LLM behavior.  </li> <li>source zone: Sprinklr Admin  </li> <li>target zone: Prompt Repository  </li> <li>type: Internal  </li> <li>security implications:<ul> <li>Prompt injection through misconfiguration  </li> <li>Admin abuse or errors  </li> <li>Input validation and version-controlled changes  </li> </ul> </li> </ul>"},{"location":"2.%20Secure%20Architecture/trust_boundary/#tb-06-sprinklr-infra-llm-subsystem","title":"\ud83d\udd38 TB-06: Sprinklr Infra \u2194 LLM Subsystem","text":"<ul> <li>id: TB-06  </li> <li>description: Sprinklr internal services invoke the LLM as part of chat or workflow orchestration.  </li> <li>source zone: Internal Services (e.g., Orchestration Layer)  </li> <li>target zone: LLM Runtime  </li> <li>type: Internal  </li> <li>security implications:<ul> <li>Misuse of LLM APIs  </li> <li>Token leakage between systems  </li> <li>Use service identity, token scopes, and logging  </li> </ul> </li> </ul>"},{"location":"2.%20Secure%20Architecture/trust_boundary/#tb-07-trust-boundary-within-the-system","title":"\ud83d\udd38 TB-07: Trust Boundary Within the System","text":"<ul> <li>id: TB-07  </li> <li>description: Even within Sprinklr\u2019s internal zones, differing trust levels exist (e.g., between stateless orchestration and memory storage, or agent vs. data plane).  </li> <li>source zone: Higher-privileged Sprinklr Component  </li> <li>target zone: Lower-privileged Internal Service  </li> <li>type: Internal (Isolated Trust Domain)  </li> <li>security implications:<ul> <li>Insider lateral movement  </li> <li>Escalation via service misconfig  </li> <li>Enforce inter-service ACLs and mutual auth  </li> </ul> </li> </ul>"},{"location":"integration/mobile_integration/","title":"Mobile Integration Guide","text":"<p>This section provides step-by-step instructions for integrating the Sprinklr Live Chat SDK into mobile applications (iOS and Android).</p>"},{"location":"integration/mobile_integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to the Sprinklr Live Chat SDK for mobile (CocoaPods, Gradle, or direct download)</li> <li>Organization credentials (orgId, apiKey)</li> <li>A native iOS (Swift/Objective-C) or Android (Kotlin/Java) application</li> </ul>"},{"location":"integration/mobile_integration/#installation","title":"Installation","text":""},{"location":"integration/mobile_integration/#ios-swift","title":"iOS (Swift)","text":"<p>Add the SDK to your Podfile:</p> <pre><code>pod 'SprinklrLiveChatSDK'\n</code></pre> <p>Then run:</p> <pre><code>pod install\n</code></pre>"},{"location":"integration/mobile_integration/#android-kotlinjava","title":"Android (Kotlin/Java)","text":"<p>Add the SDK to your build.gradle dependencies:</p> <pre><code>implementation 'com.sprinklr:live-chat-sdk:1.0.0'\n</code></pre>"},{"location":"integration/mobile_integration/#initialization","title":"Initialization","text":""},{"location":"integration/mobile_integration/#ios","title":"iOS","text":"<pre><code>import SprinklrLiveChatSDK\n\nlet chat = SprinklrChatSDK(orgId: \"YOUR_ORG_ID\", apiKey: \"YOUR_API_KEY\", environment: .production)\n</code></pre>"},{"location":"integration/mobile_integration/#android","title":"Android","text":"<pre><code>val chat = SprinklrChatSDK(\n    orgId = \"YOUR_ORG_ID\",\n    apiKey = \"YOUR_API_KEY\",\n    environment = \"production\"\n)\n</code></pre>"},{"location":"integration/mobile_integration/#authentication","title":"Authentication","text":"<ul> <li>Obtain a session token for the end user from your backend.</li> <li>Pass the session token to the SDK when starting a chat.</li> </ul>"},{"location":"integration/mobile_integration/#starting-a-chat","title":"Starting a Chat","text":""},{"location":"integration/mobile_integration/#ios_1","title":"iOS","text":"<pre><code>chat.connect()\nchat.startChat(sessionToken: sessionToken, userInfo: [\"name\": \"User Name\", \"email\": \"user@example.com\"])\n</code></pre>"},{"location":"integration/mobile_integration/#android_1","title":"Android","text":"<pre><code>chat.connect()\nchat.startChat(sessionToken, mapOf(\"name\" to \"User Name\", \"email\" to \"user@example.com\"))\n</code></pre>"},{"location":"integration/mobile_integration/#handling-messages","title":"Handling Messages","text":"<p>Register callbacks or listeners to receive messages and update your chat UI.</p>"},{"location":"integration/mobile_integration/#disconnecting","title":"Disconnecting","text":"<p>Call the appropriate disconnect method to end the chat session.</p>"},{"location":"integration/mobile_integration/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Never expose API keys or sensitive credentials in client-side code.</li> <li>Use HTTPS for all communications.</li> <li>Validate and sanitize all user input.</li> </ul> <p>See the troubleshooting section for common integration issues.</p>"},{"location":"integration/overview/","title":"Integration Overview","text":"<p>This section provides an overview of integrating the Sprinklr Live Chat SDK into partner applications. It covers the SDK's purpose, supported platforms, and the high-level steps required for successful integration.</p>"},{"location":"integration/overview/#purpose","title":"Purpose","text":"<p>The Sprinklr Live Chat SDK enables real-time chat functionality in partner web and mobile applications, allowing end users to interact securely with Sprinklr SaaS services.</p>"},{"location":"integration/overview/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Web (JavaScript/TypeScript)</li> <li>Mobile (iOS, Android)</li> </ul>"},{"location":"integration/overview/#integration-steps","title":"Integration Steps","text":"<ol> <li>Obtain SDK access and credentials from Sprinklr.</li> <li>Add the SDK to your application (web or mobile).</li> <li>Configure authentication and session management.</li> <li>Initialize the SDK and connect to Sprinklr SaaS.</li> <li>Implement chat UI and event handling.</li> <li>Test integration and handle errors.</li> <li>Monitor usage and troubleshoot as needed.</li> </ol> <p>See the following sections for detailed platform-specific integration guides.</p>"},{"location":"integration/sdk_usage/","title":"SDK Usage","text":"<p>This section explains how the Sprinklr Live Chat SDK works, its main APIs, and how to initialize and use it in your application.</p>"},{"location":"integration/sdk_usage/#initialization","title":"Initialization","text":"<p>To use the SDK, import it into your project and initialize it with your organization\u2019s credentials:</p> <pre><code>import { SprinklrChatSDK } from 'sprinklr-live-chat-sdk';\n\nconst chat = new SprinklrChatSDK({\n  orgId: 'YOUR_ORG_ID',\n  apiKey: 'YOUR_API_KEY',\n  environment: 'production', // or 'staging'\n});\n</code></pre>"},{"location":"integration/sdk_usage/#main-apis","title":"Main APIs","text":"<ul> <li>connect(): Establishes a secure connection to Sprinklr SaaS.</li> <li>startChat(sessionToken, userInfo): Initiates a chat session for the authenticated user.</li> <li>sendMessage(message): Sends a message to the chat.</li> <li>onMessage(callback): Registers a callback to receive incoming messages.</li> <li>disconnect(): Closes the chat session and cleans up resources.</li> </ul>"},{"location":"integration/sdk_usage/#event-handling","title":"Event Handling","text":"<p>The SDK provides event hooks for chat lifecycle events:</p> <pre><code>chat.on('connected', () =&gt; { /* handle connection */ });\nchat.on('message', (msg) =&gt; { /* handle incoming message */ });\nchat.on('disconnected', () =&gt; { /* handle disconnect */ });\nchat.on('error', (err) =&gt; { /* handle errors */ });\n</code></pre>"},{"location":"integration/sdk_usage/#security","title":"Security","text":"<ul> <li>All communication is encrypted (TLS/mTLS).</li> <li>Session tokens and API keys must be kept secure and never exposed in client-side code.</li> </ul> <p>See the platform-specific integration guides for more details.</p>"},{"location":"integration/troubleshooting/","title":"Troubleshooting &amp; FAQ","text":"<p>This section provides solutions to common issues encountered during the integration of the Sprinklr Live Chat SDK, as well as frequently asked questions.</p>"},{"location":"integration/troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"integration/troubleshooting/#1-sdk-fails-to-connect","title":"1. SDK Fails to Connect","text":"<ul> <li>Check network connectivity and firewall settings.</li> <li>Verify orgId and apiKey are correct.</li> <li>Ensure the environment (production/staging) is set properly.</li> <li>Check for typos in initialization code.</li> </ul>"},{"location":"integration/troubleshooting/#2-authentication-errors","title":"2. Authentication Errors","text":"<ul> <li>Ensure the session token is valid and not expired.</li> <li>Confirm the backend is issuing tokens correctly.</li> <li>Check time synchronization between client and server.</li> </ul>"},{"location":"integration/troubleshooting/#3-messages-not-received","title":"3. Messages Not Received","text":"<ul> <li>Verify the chat is connected before sending/receiving messages.</li> <li>Check event handler registration (onMessage, on).</li> <li>Inspect browser or device console/logs for errors.</li> </ul>"},{"location":"integration/troubleshooting/#4-ui-not-updating","title":"4. UI Not Updating","text":"<ul> <li>Ensure your chat UI is listening for SDK events.</li> <li>Debug with sample data to isolate UI issues from SDK issues.</li> </ul>"},{"location":"integration/troubleshooting/#5-cors-or-https-errors-web","title":"5. CORS or HTTPS Errors (Web)","text":"<ul> <li>Use HTTPS for all endpoints.</li> <li>Check CORS headers on your backend and Sprinklr endpoints.</li> </ul>"},{"location":"integration/troubleshooting/#debugging-tips","title":"Debugging Tips","text":"<ul> <li>Enable verbose logging in the SDK if available.</li> <li>Use browser dev tools or mobile device logs to inspect network requests.</li> <li>Test with sample credentials and a minimal app to isolate issues.</li> </ul>"},{"location":"integration/troubleshooting/#support","title":"Support","text":"<p>If issues persist, contact Sprinklr support with logs, error messages, and integration details.</p>"},{"location":"integration/web_integration/","title":"Web Integration Guide","text":"<p>This section provides step-by-step instructions for integrating the Sprinklr Live Chat SDK into a web application.</p>"},{"location":"integration/web_integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Access to the Sprinklr Live Chat SDK (npm package or CDN)</li> <li>Organization credentials (orgId, apiKey)</li> <li>A modern JavaScript/TypeScript web application</li> </ul>"},{"location":"integration/web_integration/#installation","title":"Installation","text":"<p>Install the SDK via npm:</p> <pre><code>npm install sprinklr-live-chat-sdk\n</code></pre> <p>Or include via CDN:</p> <pre><code>&lt;script src=\"https://cdn.sprinklr.com/live-chat-sdk.min.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"integration/web_integration/#initialization","title":"Initialization","text":"<p>Import and initialize the SDK in your app:</p> <pre><code>import { SprinklrChatSDK } from 'sprinklr-live-chat-sdk';\n\nconst chat = new SprinklrChatSDK({\n  orgId: 'YOUR_ORG_ID',\n  apiKey: 'YOUR_API_KEY',\n  environment: 'production',\n});\n</code></pre>"},{"location":"integration/web_integration/#authentication","title":"Authentication","text":"<ul> <li>Obtain a session token for the end user from your backend.</li> <li>Pass the session token to the SDK when starting a chat.</li> </ul>"},{"location":"integration/web_integration/#starting-a-chat","title":"Starting a Chat","text":"<pre><code>chat.connect();\nchat.startChat(sessionToken, { name: 'User Name', email: 'user@example.com' });\n</code></pre>"},{"location":"integration/web_integration/#handling-messages","title":"Handling Messages","text":"<pre><code>chat.on('message', (msg) =&gt; {\n  // Display message in your chat UI\n});\n</code></pre>"},{"location":"integration/web_integration/#disconnecting","title":"Disconnecting","text":"<pre><code>chat.disconnect();\n</code></pre>"},{"location":"integration/web_integration/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Never expose API keys or sensitive credentials in client-side code.</li> <li>Use HTTPS for all communications.</li> <li>Validate and sanitize all user input.</li> </ul> <p>See the troubleshooting section for common integration issues.</p>"},{"location":"threat_modeling_interviews/audit_logs_session_compromise/","title":"Q&amp;A: Audit Logs for Session Compromise","text":""},{"location":"threat_modeling_interviews/audit_logs_session_compromise/#question","title":"Question","text":"<p>Do we have audit logs to protect ourselves in case the partner app or user session is compromised?</p>"},{"location":"threat_modeling_interviews/audit_logs_session_compromise/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>Yes, all critical actions (authentication, data access, configuration changes) are logged with timestamps, user/partner IDs, and source IPs. Logs are stored in a tamper-evident system (e.g., AWS CloudWatch with retention and access controls).</p>"},{"location":"threat_modeling_interviews/audit_logs_session_compromise/#recommendation","title":"Recommendation","text":"<p>Regularly review audit logs and enable automated alerting for suspicious activity.</p>"},{"location":"threat_modeling_interviews/audit_logs_session_compromise/#risk","title":"Risk","text":"<p>If logs are incomplete or tampered with, incident investigation may be hindered.</p>"},{"location":"threat_modeling_interviews/audit_logs_session_compromise/#mitigation","title":"Mitigation","text":"<ul> <li>Store logs in immutable storage.</li> <li>Restrict log access to security personnel.</li> <li>Enable log integrity verification.</li> </ul>"},{"location":"threat_modeling_interviews/audit_logs_session_compromise/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Preserve and analyze logs during incidents.</li> <li>Use logs to determine scope and impact.</li> <li>Report findings to stakeholders.</li> </ul>"},{"location":"threat_modeling_interviews/authentication_api_websocket/","title":"Q&amp;A: Authentication for API and WebSocket Connections","text":""},{"location":"threat_modeling_interviews/authentication_api_websocket/#question","title":"Question","text":"<p>How is authentication handled for API and WebSocket connections?</p>"},{"location":"threat_modeling_interviews/authentication_api_websocket/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>All API and WebSocket connections require JWT-based authentication. Tokens are issued by our identity provider and validated at the API Gateway and WebSocket entry points. Token expiry and refresh are managed by the partner.</p> <p>API keys and secret keys are generated exclusively for each partner. The partner must use their API and secret key to sign the JWT token for the end user. This token is then validated by the Sprinklr service to ensure authenticity and integrity.</p>"},{"location":"threat_modeling_interviews/authentication_api_websocket/#recommendation","title":"Recommendation","text":"<p>Implement short-lived tokens with automatic refresh, enforce token validation at all entry points, and monitor for token misuse.</p>"},{"location":"threat_modeling_interviews/authentication_api_websocket/#risk","title":"Risk","text":"<p>If token validation is bypassed or tokens are leaked, unauthorized access to sensitive APIs or chat sessions is possible.</p>"},{"location":"threat_modeling_interviews/authentication_api_websocket/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce strict validation at API Gateway and WebSocket services.</li> <li>Use HTTPS everywhere.</li> <li>Rotate signing keys regularly.</li> <li>Monitor for suspicious authentication attempts.</li> </ul>"},{"location":"threat_modeling_interviews/authentication_api_websocket/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Immediately revoke compromised tokens.</li> <li>Rotate signing keys.</li> <li>Investigate access logs for unauthorized activity.</li> <li>Notify affected users and partners as per incident response policy.</li> </ul>"},{"location":"threat_modeling_interviews/historical_chat_data/","title":"Q&amp;A: Historical Chat Data Storage","text":""},{"location":"threat_modeling_interviews/historical_chat_data/#question","title":"Question","text":"<p>Are we saving any historical chat data?</p>"},{"location":"threat_modeling_interviews/historical_chat_data/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>Yes, chat transcripts and metadata are stored in encrypted databases for compliance, analytics, and support purposes. Retention policies are configurable per partner.</p>"},{"location":"threat_modeling_interviews/historical_chat_data/#recommendation","title":"Recommendation","text":"<p>Document and enforce data retention and deletion policies. Allow partners to configure retention as per their compliance needs.</p>"},{"location":"threat_modeling_interviews/historical_chat_data/#risk","title":"Risk","text":"<p>Excessive retention could expose sensitive data in case of a breach.</p>"},{"location":"threat_modeling_interviews/historical_chat_data/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce least-privilege access to chat data.</li> <li>Regularly purge data as per policy.</li> <li>Encrypt data at rest and in transit.</li> </ul>"},{"location":"threat_modeling_interviews/historical_chat_data/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Identify and contain any data exposure.</li> <li>Notify affected partners.</li> <li>Review and update retention policies.</li> </ul>"},{"location":"threat_modeling_interviews/input_validation_sanitization/","title":"Q&amp;A: Input Validation and Sanitization of End User Messages","text":""},{"location":"threat_modeling_interviews/input_validation_sanitization/#question","title":"Question","text":"<p>How are we performing input validation and sanitization of messages coming via end user?</p>"},{"location":"threat_modeling_interviews/input_validation_sanitization/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>All messages received from end users are validated and sanitized at the API gateway and backend service layers. Validation includes checking for message length, allowed characters, and format. Sanitization removes or escapes potentially dangerous content (e.g., scripts, HTML tags) to prevent injection attacks and ensure safe processing by downstream systems, including LLMs.</p>"},{"location":"threat_modeling_interviews/input_validation_sanitization/#recommendation","title":"Recommendation","text":"<p>Maintain strict input validation and sanitization for all user-supplied data. Regularly update validation rules to address new threats.</p>"},{"location":"threat_modeling_interviews/input_validation_sanitization/#risk","title":"Risk","text":"<p>If input is not properly validated or sanitized, attackers could exploit injection vulnerabilities, leading to XSS, LLM prompt injection, or backend compromise.</p>"},{"location":"threat_modeling_interviews/input_validation_sanitization/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce validation and sanitization at all entry points.</li> <li>Use well-maintained libraries for sanitization.</li> <li>Monitor for validation failures and suspicious input patterns.</li> </ul>"},{"location":"threat_modeling_interviews/input_validation_sanitization/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Block and log malicious input attempts.</li> <li>Patch validation/sanitization gaps.</li> <li>Notify security team and affected partners.</li> </ul>"},{"location":"threat_modeling_interviews/llm_context_isolation/","title":"Q&amp;A: Isolating End User Context in LLM Responses","text":""},{"location":"threat_modeling_interviews/llm_context_isolation/#question","title":"Question","text":"<p>How are we isolating the context of end users in case of LLM response?</p>"},{"location":"threat_modeling_interviews/llm_context_isolation/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>Each LLM request is scoped to a single end user and partner context. The backend ensures that only data and context relevant to the requesting user and partner are included in the prompt sent to the LLM. No cross-user or cross-partner data is ever included in the same LLM session or prompt. Strict tenant and session isolation is enforced at all layers.</p>"},{"location":"threat_modeling_interviews/llm_context_isolation/#recommendation","title":"Recommendation","text":"<p>Continue to enforce strict context isolation for all LLM requests. Regularly audit LLM prompts and responses for accidental data leakage.</p>"},{"location":"threat_modeling_interviews/llm_context_isolation/#risk","title":"Risk","text":"<p>If context isolation fails, sensitive data from one user or partner could be exposed to another.</p>"},{"location":"threat_modeling_interviews/llm_context_isolation/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce tenant and session checks before LLM invocation.</li> <li>Log and review LLM prompts for compliance.</li> <li>Use automated tools to detect context leakage.</li> </ul>"},{"location":"threat_modeling_interviews/llm_context_isolation/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Immediately block affected LLM endpoints or sessions.</li> <li>Notify impacted users/partners.</li> <li>Audit and remediate isolation controls.</li> </ul>"},{"location":"threat_modeling_interviews/llm_guardrails_prompt_injection/","title":"Q&amp;A: LLM Guardrails, Prompt Injection, Info Leakage, and Bias","text":""},{"location":"threat_modeling_interviews/llm_guardrails_prompt_injection/#question","title":"Question","text":"<p>How are we ensuring that LLM models (local or API-based) are not prone to prompt injection, information leakage, or bias?</p>"},{"location":"threat_modeling_interviews/llm_guardrails_prompt_injection/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>All user and partner inputs to LLMs are passed through a guardrail layer that performs prompt sanitization, input validation, and context filtering. The guardrail layer detects and blocks known prompt injection patterns, strips sensitive data, and enforces content policies. LLM outputs are also post-processed to redact sensitive information and check for bias or policy violations.</p>"},{"location":"threat_modeling_interviews/llm_guardrails_prompt_injection/#recommendation","title":"Recommendation","text":"<p>Continue to enhance the LLM guardrail layer with up-to-date detection patterns, context-aware filtering, and output moderation. Regularly audit LLM usage and responses for leakage and bias.</p>"},{"location":"threat_modeling_interviews/llm_guardrails_prompt_injection/#risk","title":"Risk","text":"<p>If prompt injection or info leakage occurs, sensitive data could be exposed or LLMs could be manipulated to produce harmful outputs.</p>"},{"location":"threat_modeling_interviews/llm_guardrails_prompt_injection/#mitigation","title":"Mitigation","text":"<ul> <li>Maintain and update guardrail rules and detection patterns.</li> <li>Monitor LLM usage and outputs for anomalies.</li> <li>Use human-in-the-loop review for high-risk scenarios.</li> </ul>"},{"location":"threat_modeling_interviews/llm_guardrails_prompt_injection/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Block affected LLM endpoints or sessions.</li> <li>Investigate and patch guardrail gaps.</li> <li>Notify stakeholders and update detection logic.</li> </ul>"},{"location":"threat_modeling_interviews/sdk_integrity_versioning/","title":"Q&amp;A: SDK Integrity and Versioning","text":""},{"location":"threat_modeling_interviews/sdk_integrity_versioning/#question","title":"Question","text":"<p>How are we ensuring integrity and versioning of our SDK artifacts?</p>"},{"location":"threat_modeling_interviews/sdk_integrity_versioning/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>All SDK artifacts are versioned and published with cryptographic hashes (e.g., SHA-256). Partners are encouraged to verify hashes before use. CDN and S3 enforce immutability for released versions.</p>"},{"location":"threat_modeling_interviews/sdk_integrity_versioning/#recommendation","title":"Recommendation","text":"<p>Automate hash generation and verification in CI/CD. Communicate hash values to partners.</p>"},{"location":"threat_modeling_interviews/sdk_integrity_versioning/#risk","title":"Risk","text":"<p>If artifacts are tampered with, partners may load malicious code.</p>"},{"location":"threat_modeling_interviews/sdk_integrity_versioning/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce artifact immutability.</li> <li>Monitor for unauthorized changes.</li> <li>Provide hash verification tools.</li> </ul>"},{"location":"threat_modeling_interviews/sdk_integrity_versioning/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Invalidate compromised artifacts.</li> <li>Notify partners to update SDK.</li> <li>Investigate distribution pipeline.</li> </ul>"},{"location":"threat_modeling_interviews/sdk_trusted_domains/","title":"Q&amp;A: SDK Loading via Trusted Domains","text":""},{"location":"threat_modeling_interviews/sdk_trusted_domains/#question","title":"Question","text":"<p>How are we ensuring that the SDK can only be loaded via trusted domains?</p>"},{"location":"threat_modeling_interviews/sdk_trusted_domains/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>We use CORS headers and referer validation at the CDN and S3 level to restrict SDK asset delivery to a list of trusted partner domains.</p>"},{"location":"threat_modeling_interviews/sdk_trusted_domains/#recommendation","title":"Recommendation","text":"<p>Maintain an up-to-date allowlist of trusted domains and monitor for unauthorized access attempts.</p>"},{"location":"threat_modeling_interviews/sdk_trusted_domains/#risk","title":"Risk","text":"<p>If CORS or referer checks are bypassed, SDK could be loaded by malicious sites.</p>"},{"location":"threat_modeling_interviews/sdk_trusted_domains/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce strict CORS and referer policies.</li> <li>Monitor CDN logs for anomalies.</li> <li>Periodically review and update domain allowlists.</li> </ul>"},{"location":"threat_modeling_interviews/sdk_trusted_domains/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Revoke access for compromised domains.</li> <li>Notify affected partners.</li> <li>Investigate and remediate root cause.</li> </ul>"},{"location":"threat_modeling_interviews/secure_comm_partner_sprinklr/","title":"Q&amp;A: Secure Communication Between Partner and Sprinklr Service","text":""},{"location":"threat_modeling_interviews/secure_comm_partner_sprinklr/#question","title":"Question","text":"<p>How are we ensuring secure communication between partner and Sprinklr service?</p>"},{"location":"threat_modeling_interviews/secure_comm_partner_sprinklr/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>All communication between partner systems and Sprinklr services is secured using mutual TLS (mTLS) for both API and WebSocket connections. Only trusted certificates are accepted, and connections are restricted to whitelisted IPs where possible.</p>"},{"location":"threat_modeling_interviews/secure_comm_partner_sprinklr/#recommendation","title":"Recommendation","text":"<p>Continue enforcing mTLS for all partner-to-Sprinklr communication. Regularly audit certificate trust stores and IP whitelists.</p>"},{"location":"threat_modeling_interviews/secure_comm_partner_sprinklr/#risk","title":"Risk","text":"<p>If mTLS is misconfigured or certificates are compromised, attackers could intercept or impersonate traffic.</p>"},{"location":"threat_modeling_interviews/secure_comm_partner_sprinklr/#mitigation","title":"Mitigation","text":"<ul> <li>Automate certificate rotation and revocation.</li> <li>Monitor for failed or suspicious connection attempts.</li> <li>Enforce strict IP whitelisting.</li> </ul>"},{"location":"threat_modeling_interviews/secure_comm_partner_sprinklr/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Revoke compromised certificates.</li> <li>Update trust stores and IP whitelists.</li> <li>Notify affected partners and rotate credentials.</li> </ul>"},{"location":"threat_modeling_interviews/secure_faq_kg_upload/","title":"Q&amp;A: Securing FAQ/Knowledge Graph Upload Functionality","text":""},{"location":"threat_modeling_interviews/secure_faq_kg_upload/#question","title":"Question","text":"<p>How are we securing upload FAQ/knowledge graph functionality for partner to Sprinklr?</p>"},{"location":"threat_modeling_interviews/secure_faq_kg_upload/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>Partners upload FAQ and knowledge graph data using pre-signed, time-limited S3 URLs. Each upload is scoped to a specific partner and path, and access is authenticated and authorized via the API Gateway. All uploads are validated for file type, size, and content before being accepted.</p>"},{"location":"threat_modeling_interviews/secure_faq_kg_upload/#recommendation","title":"Recommendation","text":"<p>Continue to use pre-signed URLs with strict expiration and scope. Validate all uploads on the backend and monitor for unusual activity.</p>"},{"location":"threat_modeling_interviews/secure_faq_kg_upload/#risk","title":"Risk","text":"<p>If upload URLs are leaked or validation is bypassed, unauthorized or malicious data could be uploaded.</p>"},{"location":"threat_modeling_interviews/secure_faq_kg_upload/#mitigation","title":"Mitigation","text":"<ul> <li>Limit URL validity and scope.</li> <li>Enforce backend validation of all uploads.</li> <li>Monitor and alert on unusual upload patterns.</li> </ul>"},{"location":"threat_modeling_interviews/secure_faq_kg_upload/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Revoke affected URLs.</li> <li>Remove unauthorized or malicious data.</li> <li>Notify affected partners and review upload logs.</li> </ul>"},{"location":"threat_modeling_interviews/secure_uploaded_data_isolation/","title":"Q&amp;A: Secure Uploaded Data at Rest and Partner Data Isolation","text":""},{"location":"threat_modeling_interviews/secure_uploaded_data_isolation/#question","title":"Question","text":"<p>How are we ensuring that uploaded data is secure at rest, and in case of any data leak, other partners' data is not impacted?</p>"},{"location":"threat_modeling_interviews/secure_uploaded_data_isolation/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>All uploaded data is encrypted at rest using AWS KMS-managed keys. Each partner's data is stored in a logically separated S3 path or bucket, with IAM policies enforcing strict access controls. Cross-partner access is not permitted at any layer. Regular audits and monitoring are performed to detect and prevent misconfigurations.</p>"},{"location":"threat_modeling_interviews/secure_uploaded_data_isolation/#recommendation","title":"Recommendation","text":"<p>Continue to enforce strict tenant isolation and encryption at rest. Periodically review IAM policies and bucket configurations.</p>"},{"location":"threat_modeling_interviews/secure_uploaded_data_isolation/#risk","title":"Risk","text":"<p>A misconfiguration could allow unauthorized access to another partner's data in the event of a data leak.</p>"},{"location":"threat_modeling_interviews/secure_uploaded_data_isolation/#mitigation","title":"Mitigation","text":"<ul> <li>Use separate S3 buckets or prefixes per partner.</li> <li>Enforce least-privilege IAM policies.</li> <li>Enable S3 access logging and AWS Config rules for compliance.</li> </ul>"},{"location":"threat_modeling_interviews/secure_uploaded_data_isolation/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Immediately restrict access to affected data.</li> <li>Notify impacted partners.</li> <li>Audit and remediate misconfigurations.</li> <li>Review and update isolation controls.</li> </ul>"},{"location":"threat_modeling_interviews/session_token_storage/","title":"Q&amp;A: Secure Storage of Sprinklr Session Tokens","text":""},{"location":"threat_modeling_interviews/session_token_storage/#question","title":"Question","text":"<p>How are we storing the session tokens for Sprinklr? Ideally, we should not store them in localStorage or cookies, as they can be exploited in case of XSS on the partner app (over which we have no or limited control). Tokens should be stored in memory to reduce the risk.</p>"},{"location":"threat_modeling_interviews/session_token_storage/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>Session tokens for Sprinklr are never stored in localStorage or cookies. The SDK is designed to keep tokens only in memory (e.g., JavaScript variables or closures) for the duration of the session. This approach minimizes the risk of token theft via XSS attacks on the partner app.</p>"},{"location":"threat_modeling_interviews/session_token_storage/#recommendation","title":"Recommendation","text":"<p>Continue to avoid persistent storage of session tokens in the browser. Educate partners on the risks of storing tokens in localStorage or cookies, and provide SDK patterns that keep tokens in memory only.</p>"},{"location":"threat_modeling_interviews/session_token_storage/#risk","title":"Risk","text":"<p>If tokens are stored in localStorage or cookies, they can be stolen via XSS, leading to session hijacking and unauthorized access.</p>"},{"location":"threat_modeling_interviews/session_token_storage/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce in-memory storage of tokens in the SDK.</li> <li>Provide clear documentation and code samples for partners.</li> <li>Monitor for suspicious session activity.</li> </ul>"},{"location":"threat_modeling_interviews/session_token_storage/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Invalidate affected tokens and sessions.</li> <li>Notify partners of best practices and remediation steps.</li> <li>Review SDK and partner implementations for compliance.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/","title":"Threat Modeling Q&amp;A with Tech Leads","text":"<p>This document captures key questions and answers discussed with technical leads to clarify architectural and security decisions. Each entry includes the question, the tech lead's answer, our recommendation, identified risks, proposed mitigations, and an incident response plan.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question","title":"Question","text":"<p>How is authentication handled for API and WebSocket connections?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>All API and WebSocket connections require JWT-based authentication. Tokens are issued by our identity provider and validated at the API Gateway and WebSocket entry points. Token expiry and refresh are managed by the partner.</p> <p>API keys and secret keys are generated exclusively for each partner. The partner must use their API and secret key to sign the JWT token for the end user. This token is then validated by the Sprinklr service to ensure authenticity and integrity.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation","title":"Recommendation","text":"<p>Implement short-lived tokens with automatic refresh, enforce token validation at all entry points, and monitor for token misuse.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk","title":"Risk","text":"<p>If token validation is bypassed or tokens are leaked, unauthorized access to sensitive APIs or chat sessions is possible.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation","title":"Mitigation","text":"<ul> <li>Enforce strict validation at API Gateway and WebSocket services.</li> <li>Use HTTPS everywhere.</li> <li>Rotate signing keys regularly.</li> <li>Monitor for suspicious authentication attempts.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Immediately revoke compromised tokens.</li> <li>Rotate signing keys.</li> <li>Investigate access logs for unauthorized activity.</li> <li>Notify affected users and partners as per incident response policy.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_1","title":"Question","text":"<p>How are we ensuring secure communication between partner and Sprinklr service?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_1","title":"Tech Lead's Answer","text":"<p>All communication between partner systems and Sprinklr services is secured using mutual TLS (mTLS) for both API and WebSocket connections. Only trusted certificates are accepted, and connections are restricted to whitelisted IPs where possible.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_1","title":"Recommendation","text":"<p>Continue enforcing mTLS for all partner-to-Sprinklr communication. Regularly audit certificate trust stores and IP whitelists.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_1","title":"Risk","text":"<p>If mTLS is misconfigured or certificates are compromised, attackers could intercept or impersonate traffic.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_1","title":"Mitigation","text":"<ul> <li>Automate certificate rotation and revocation.</li> <li>Monitor for failed or suspicious connection attempts.</li> <li>Enforce strict IP whitelisting.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_1","title":"Incident Response Plan","text":"<ul> <li>Revoke compromised certificates.</li> <li>Update trust stores and IP whitelists.</li> <li>Notify affected partners and rotate credentials.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_2","title":"Question","text":"<p>Are we saving any historical chat data?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_2","title":"Tech Lead's Answer","text":"<p>Yes, chat transcripts and metadata are stored in encrypted databases for compliance, analytics, and support purposes. Retention policies are configurable per partner.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_2","title":"Recommendation","text":"<p>Document and enforce data retention and deletion policies. Allow partners to configure retention as per their compliance needs.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_2","title":"Risk","text":"<p>Excessive retention could expose sensitive data in case of a breach.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_2","title":"Mitigation","text":"<ul> <li>Enforce least-privilege access to chat data.</li> <li>Regularly purge data as per policy.</li> <li>Encrypt data at rest and in transit.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_2","title":"Incident Response Plan","text":"<ul> <li>Identify and contain any data exposure.</li> <li>Notify affected partners.</li> <li>Review and update retention policies.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_3","title":"Question","text":"<p>Do we have audit logs to protect ourselves in case the partner app or user session is compromised?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_3","title":"Tech Lead's Answer","text":"<p>Yes, all critical actions (authentication, data access, configuration changes) are logged with timestamps, user/partner IDs, and source IPs. Logs are stored in a tamper-evident system (e.g., AWS CloudWatch with retention and access controls).</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_3","title":"Recommendation","text":"<p>Regularly review audit logs and enable automated alerting for suspicious activity.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_3","title":"Risk","text":"<p>If logs are incomplete or tampered with, incident investigation may be hindered.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_3","title":"Mitigation","text":"<ul> <li>Store logs in immutable storage.</li> <li>Restrict log access to security personnel.</li> <li>Enable log integrity verification.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_3","title":"Incident Response Plan","text":"<ul> <li>Preserve and analyze logs during incidents.</li> <li>Use logs to determine scope and impact.</li> <li>Report findings to stakeholders.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_4","title":"Question","text":"<p>How are we ensuring that the SDK can only be loaded via trusted domains?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_4","title":"Tech Lead's Answer","text":"<p>We use CORS headers and referer validation at the CDN and S3 level to restrict SDK asset delivery to a list of trusted partner domains.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_4","title":"Recommendation","text":"<p>Maintain an up-to-date allowlist of trusted domains and monitor for unauthorized access attempts.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_4","title":"Risk","text":"<p>If CORS or referer checks are bypassed, SDK could be loaded by malicious sites.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_4","title":"Mitigation","text":"<ul> <li>Enforce strict CORS and referer policies.</li> <li>Monitor CDN logs for anomalies.</li> <li>Periodically review and update domain allowlists.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_4","title":"Incident Response Plan","text":"<ul> <li>Revoke access for compromised domains.</li> <li>Notify affected partners.</li> <li>Investigate and remediate root cause.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_5","title":"Question","text":"<p>How are we ensuring integrity and versioning of our SDK artifacts?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_5","title":"Tech Lead's Answer","text":"<p>All SDK artifacts are versioned and published with cryptographic hashes (e.g., SHA-256). Partners are encouraged to verify hashes before use. CDN and S3 enforce immutability for released versions.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_5","title":"Recommendation","text":"<p>Automate hash generation and verification in CI/CD. Communicate hash values to partners.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_5","title":"Risk","text":"<p>If artifacts are tampered with, partners may load malicious code.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_5","title":"Mitigation","text":"<ul> <li>Enforce artifact immutability.</li> <li>Monitor for unauthorized changes.</li> <li>Provide hash verification tools.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_5","title":"Incident Response Plan","text":"<ul> <li>Invalidate compromised artifacts.</li> <li>Notify partners to update SDK.</li> <li>Investigate distribution pipeline.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_6","title":"Question","text":"<p>Do we have a rate control check?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_6","title":"Tech Lead's Answer","text":"<p>Yes, API Gateway and WebSocket endpoints enforce rate limits per partner and per end user. Limits are configurable and monitored.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_6","title":"Recommendation","text":"<p>Regularly review and adjust rate limits based on usage patterns and threat intelligence.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_6","title":"Risk","text":"<p>Insufficient rate limiting could allow abuse or DoS attacks.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_6","title":"Mitigation","text":"<ul> <li>Enforce sensible default limits.</li> <li>Alert on rate limit violations.</li> <li>Block abusive clients automatically.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_6","title":"Incident Response Plan","text":"<ul> <li>Throttle or block offending IPs/partners.</li> <li>Notify affected parties.</li> <li>Review and update rate limiting rules.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_7","title":"Question","text":"<p>How are we dealing with the possibility of DoS and DDoS attacks, especially when allowing WebSocket communication?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_7","title":"Tech Lead's Answer","text":"<p>We use AWS Shield and WAF for DDoS protection at the edge (CloudFront, ELB). WebSocket connections are rate-limited and monitored for abuse. Auto-scaling and connection quotas are enforced.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_7","title":"Recommendation","text":"<p>Test DDoS response plans and regularly review protection configurations.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_7","title":"Risk","text":"<p>Large-scale attacks could impact service availability.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_7","title":"Mitigation","text":"<ul> <li>Use AWS Shield Advanced.</li> <li>Enforce connection quotas.</li> <li>Monitor and auto-scale resources.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_7","title":"Incident Response Plan","text":"<ul> <li>Engage AWS DDoS Response Team.</li> <li>Scale up resources as needed.</li> <li>Communicate with partners/end users.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_8","title":"Question","text":"<p>How are we securing communication over WebSocket from MITM attacks and session impersonation?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_8","title":"Tech Lead's Answer","text":"<p>All WebSocket traffic is encrypted with TLS. JWT tokens are validated on every connection and periodically during session. Session IDs are random and unguessable.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_8","title":"Recommendation","text":"<p>Enforce TLS 1.2+ for all WebSocket endpoints. Rotate session tokens regularly.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_8","title":"Risk","text":"<p>If encryption or token validation fails, sessions could be hijacked.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_8","title":"Mitigation","text":"<ul> <li>Monitor for invalid or expired tokens.</li> <li>Enforce strict session timeouts.</li> <li>Use secure random session IDs.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_8","title":"Incident Response Plan","text":"<ul> <li>Invalidate affected sessions.</li> <li>Notify impacted users/partners.</li> <li>Investigate and patch vulnerabilities.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_9","title":"Question","text":"<p>How do we gracefully handle token expiry and refresh mechanisms?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_9","title":"Tech Lead's Answer","text":"<p>Partners are required to implement token refresh logic. Expired tokens result in a 401 response, prompting the partner to obtain a new token and retry the request.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_9","title":"Recommendation","text":"<p>Document token refresh flows and provide SDK support for automatic refresh.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_9","title":"Risk","text":"<p>Poorly handled expiry could disrupt user sessions.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_9","title":"Mitigation","text":"<ul> <li>Provide clear error codes and messages.</li> <li>Support seamless token refresh in SDK.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_9","title":"Incident Response Plan","text":"<ul> <li>Monitor for excessive token expiry errors.</li> <li>Assist partners with integration issues.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_10","title":"Question","text":"<p>How are we securely allowing partners to upload FAQ and knowledge base data to our S3 bucket?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_10","title":"Tech Lead's Answer","text":"<p>Partners are given pre-signed, time-limited S3 URLs for uploads. Access is scoped to specific buckets and paths per partner.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_10","title":"Recommendation","text":"<p>Expire pre-signed URLs quickly and audit all uploads.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_10","title":"Risk","text":"<p>If URLs are leaked, unauthorized uploads could occur.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_10","title":"Mitigation","text":"<ul> <li>Limit URL validity.</li> <li>Monitor and alert on unusual upload activity.</li> <li>Restrict bucket policies.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_10","title":"Incident Response Plan","text":"<ul> <li>Revoke affected URLs.</li> <li>Audit and remove unauthorized data.</li> <li>Notify partners.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_11","title":"Question","text":"<p>How are we securing our S3 bucket data?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_11","title":"Tech Lead's Answer","text":"<p>All S3 buckets are private by default. Access is controlled via IAM policies and bucket policies. Data is encrypted at rest using AWS KMS.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_11","title":"Recommendation","text":"<p>Regularly audit bucket policies and access logs.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_11","title":"Risk","text":"<p>Misconfigured buckets could expose sensitive data.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_11","title":"Mitigation","text":"<ul> <li>Enforce least-privilege access.</li> <li>Enable S3 access logging.</li> <li>Use AWS Config for compliance monitoring.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_11","title":"Incident Response Plan","text":"<ul> <li>Restrict access immediately.</li> <li>Investigate access logs.</li> <li>Notify affected partners.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_12","title":"Question","text":"<p>Are the SPA frontend assets and sensitive data from partners (FAQ, etc.) stored in separate buckets?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_12","title":"Tech Lead's Answer","text":"<p>Yes, SPA frontend assets and partner-uploaded data are stored in separate S3 buckets with distinct access controls and encryption keys.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_12","title":"Recommendation","text":"<p>Maintain strict separation and audit access regularly.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_12","title":"Risk","text":"<p>Mixing data could lead to accidental exposure.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_12","title":"Mitigation","text":"<ul> <li>Use separate IAM roles and policies.</li> <li>Tag and monitor buckets for compliance.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_12","title":"Incident Response Plan","text":"<ul> <li>Isolate affected buckets.</li> <li>Notify partners if exposure occurs.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_13","title":"Question","text":"<p>How are we storing data at rest in our database?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_13","title":"Tech Lead's Answer","text":"<p>All data at rest is encrypted using AWS KMS-managed keys. Access to the database is restricted to application services within the VPC.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_13","title":"Recommendation","text":"<p>Rotate encryption keys regularly and audit access.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_13","title":"Risk","text":"<p>If keys or access are compromised, data could be exposed.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_13","title":"Mitigation","text":"<ul> <li>Enforce IAM-based access.</li> <li>Enable database audit logging.</li> <li>Use KMS key rotation.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_13","title":"Incident Response Plan","text":"<ul> <li>Rotate keys.</li> <li>Investigate access logs.</li> <li>Notify affected parties.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_14","title":"Question","text":"<p>How are we ensuring that in case of API key compromise of any partner, other partners and their end users are not compromised?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_14","title":"Tech Lead's Answer","text":"<p>Each partner has unique API and secret keys. Access is scoped per partner, and keys cannot be used to access other partners' data or services.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_14","title":"Recommendation","text":"<p>Enforce strict tenant isolation and monitor for cross-tenant access attempts.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_14","title":"Risk","text":"<p>Improper isolation could lead to data leakage.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_14","title":"Mitigation","text":"<ul> <li>Use unique credentials per partner.</li> <li>Enforce RBAC and tenant checks in all APIs.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_14","title":"Incident Response Plan","text":"<ul> <li>Revoke compromised keys.</li> <li>Audit for cross-tenant access.</li> <li>Notify affected partners.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_15","title":"Question","text":"<p>Apart from mTLS, do we also allow trusted IP whitelisting from partner to our service communication?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_15","title":"Tech Lead's Answer","text":"<p>Yes, partners can request IP whitelisting for additional security. Only traffic from registered IPs is allowed at the firewall and load balancer.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_15","title":"Recommendation","text":"<p>Encourage partners to use static IPs and maintain up-to-date whitelists.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_15","title":"Risk","text":"<p>If IPs are spoofed or whitelists are outdated, unauthorized access could occur.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_15","title":"Mitigation","text":"<ul> <li>Monitor for unexpected source IPs.</li> <li>Require regular review of whitelists.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_15","title":"Incident Response Plan","text":"<ul> <li>Remove compromised IPs from whitelist.</li> <li>Notify partners of changes.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_16","title":"Question","text":"<p>How are we ensuring mTLS certificate rotation?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_16","title":"Tech Lead's Answer","text":"<p>Certificate rotation is automated using AWS ACM or a managed PKI. Expiring certificates trigger alerts and are replaced before expiry.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_16","title":"Recommendation","text":"<p>Test rotation procedures regularly and document the process.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_16","title":"Risk","text":"<p>Expired certificates could disrupt service.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_16","title":"Mitigation","text":"<ul> <li>Monitor certificate expiry dates.</li> <li>Automate renewal and deployment.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_16","title":"Incident Response Plan","text":"<ul> <li>Replace expired certificates immediately.</li> <li>Communicate with partners about rotation schedules.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#question_17","title":"Question","text":"<p>Are we using KMS or Vault to ensure our configs and secrets are securely stored?</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#tech-leads-answer_17","title":"Tech Lead's Answer","text":"<p>Yes, all secrets and configuration values are stored in AWS Secrets Manager or HashiCorp Vault, encrypted with KMS keys. Access is tightly controlled and audited.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#recommendation_17","title":"Recommendation","text":"<p>Regularly rotate secrets and audit access logs.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#risk_17","title":"Risk","text":"<p>If secrets are leaked, attackers could gain privileged access.</p>"},{"location":"threat_modeling_interviews/tech_lead_qna/#mitigation_17","title":"Mitigation","text":"<ul> <li>Enforce least-privilege access.</li> <li>Enable automatic secret rotation.</li> <li>Monitor for unauthorized access.</li> </ul>"},{"location":"threat_modeling_interviews/tech_lead_qna/#incident-response-plan_17","title":"Incident Response Plan","text":"<ul> <li>Rotate affected secrets.</li> <li>Investigate and remediate root cause.</li> <li>Notify stakeholders.</li> </ul>"},{"location":"threat_modeling_interviews/websocket_message_integrity_hmac/","title":"Q&amp;A: WebSocket Message Integrity (HMAC) for Chat Messages","text":""},{"location":"threat_modeling_interviews/websocket_message_integrity_hmac/#question","title":"Question","text":"<p>Apart from TLS, do we also impose message integrity checks (e.g., HMAC) for the chat messages received via WebSocket from end users, to ensure that in case of partner app compromise (e.g., XSS) it is still difficult to affect our system?</p>"},{"location":"threat_modeling_interviews/websocket_message_integrity_hmac/#tech-leads-answer","title":"Tech Lead's Answer","text":"<p>Yes, in addition to TLS encryption, each chat message sent via WebSocket is signed with an HMAC using a key unique to the partner and session. The Sprinklr backend verifies the HMAC on every message before processing. This ensures that even if a partner app is compromised (e.g., via XSS), it is difficult for an attacker to forge valid messages without access to the HMAC key.</p>"},{"location":"threat_modeling_interviews/websocket_message_integrity_hmac/#recommendation","title":"Recommendation","text":"<p>Continue enforcing HMAC-based message integrity for all WebSocket chat messages. Rotate HMAC keys per session and partner, and never expose them to the browser.</p>"},{"location":"threat_modeling_interviews/websocket_message_integrity_hmac/#risk","title":"Risk","text":"<p>If HMAC keys are leaked or not rotated, attackers could forge messages, potentially leading to abuse or system compromise.</p>"},{"location":"threat_modeling_interviews/websocket_message_integrity_hmac/#mitigation","title":"Mitigation","text":"<ul> <li>Store HMAC keys securely on the backend only.</li> <li>Rotate keys per session and partner.</li> <li>Monitor for failed HMAC validations and alert on anomalies.</li> </ul>"},{"location":"threat_modeling_interviews/websocket_message_integrity_hmac/#incident-response-plan","title":"Incident Response Plan","text":"<ul> <li>Invalidate affected sessions and keys.</li> <li>Investigate the source of key leakage or forgery attempts.</li> <li>Notify affected partners and update security controls.</li> </ul>"}]}